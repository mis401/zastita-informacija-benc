{"ast":null,"code":"import { SBox } from \"./tiger-s-boxes\";\nexport class TigerHash {\n  padding(data) {\n    //padding\n    const dataLength = data.length;\n    const paddingLength = 56 - dataLength % 56 === 0 ? 56 : 56 - dataLength % 56;\n    const padding = new Uint8Array(paddingLength).fill(0x00);\n    padding[0] = 0x01;\n    const littleEndianLength = new Uint8Array(8).fill(0x00);\n    console.log(dataLength);\n    let dataLengthPrep = dataLength;\n    for (let i = 0; i < 8; i++) {\n      littleEndianLength[i] = dataLengthPrep % 256;\n      //potrebno je celobrojno deljenje ali typescript :(\n      dataLengthPrep = dataLengthPrep >>> 8;\n    }\n    const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\n    return paddedData;\n  }\n  blockOperation(data) {\n    const blocks = [];\n    for (let i = 0; i < data.length; i += 64) {\n      const block = data.slice(i, i + 64);\n      blocks.push(block);\n    }\n    return new Uint8Array();\n  }\n  hash(data) {\n    let h0 = 0x0123456789abcdefn;\n    let h1 = 0xfedcba9876543210n;\n    let h2 = 0xf096a5b4c3d2e187n;\n    data = this.padding(data);\n    for (let block = 0; block < data.length; block += 64) {\n      let a = h0;\n      let b = h1;\n      let c = h2;\n      const segment = data.slice(block, block + 64);\n      const w = segment.slice(0, 64);\n      for (let pass = 0; pass < 3; pass++) {\n        for (let round = 0; round < 7; round++) {\n          c = c ^ BigInt(w[round]);\n          let c_copy = c;\n          const c_array = new Uint8Array(8).fill(0);\n          for (let i = 0; i < 8; i++) {\n            c_array[i] = Number(c_copy % 256n);\n            c_copy = c_copy >> 8n;\n          }\n          a = a - SBox[c_array[0]] ^ SBox[256 + c_array[2]] ^ SBox;\n        }\n      }\n    }\n    return new Uint8Array();\n  }\n}","map":{"version":3,"names":["SBox","TigerHash","padding","data","dataLength","length","paddingLength","Uint8Array","fill","littleEndianLength","console","log","dataLengthPrep","i","paddedData","blockOperation","blocks","block","slice","push","hash","h0","h1","h2","a","b","c","segment","w","pass","round","BigInt","c_copy","c_array","Number"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\hash\\TigerHash.ts"],"sourcesContent":["import { IHash } from \"./IHash\";\r\nimport { SBox } from \"./tiger-s-boxes\";\r\n\r\nexport class TigerHash implements IHash {\r\n    padding(data: Uint8Array): Uint8Array {\r\n        //padding\r\n        const dataLength = data.length;\r\n        const paddingLength = (56 - (dataLength % 56) === 0) ? 56 : 56 - (dataLength % 56);\r\n        const padding = new Uint8Array(paddingLength).fill(0x00);\r\n        padding[0] = 0x01;\r\n        const littleEndianLength = new Uint8Array(8).fill(0x00);\r\n        console.log(dataLength)\r\n        let dataLengthPrep = dataLength\r\n        for (let i = 0; i < 8; i++) {\r\n            littleEndianLength[i] = dataLengthPrep % 256;\r\n            //potrebno je celobrojno deljenje ali typescript :(\r\n            dataLengthPrep = dataLengthPrep >>> 8;\r\n        }\r\n        const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\r\n\r\n        return paddedData;\r\n    }\r\n\r\n    blockOperation(data: Uint8Array): Uint8Array {\r\n        const blocks = [];\r\n        for (let i = 0; i < data.length; i += 64) {\r\n            const block = data.slice(i, i + 64);\r\n            blocks.push(block);\r\n        }\r\n        return new Uint8Array();\r\n    }\r\n    \r\n    hash(data: Uint8Array): Uint8Array {\r\n        let h0 = 0x0123456789ABCDEFn\r\n        let h1 = 0xFEDCBA9876543210n\r\n        let h2 = 0xF096A5B4C3D2E187n\r\n\r\n        data = this.padding(data);\r\n        for (let block = 0; block < data.length; block += 64) {\r\n            let a = h0;\r\n            let b = h1;\r\n            let c = h2;\r\n\r\n            const segment = data.slice(block, block + 64);\r\n            const w = segment.slice(0, 64);\r\n\r\n            for (let pass = 0; pass < 3; pass++) {\r\n                for (let round = 0; round < 7; round++) {\r\n                    c = c ^ BigInt(w[round]);\r\n                    let c_copy = c;\r\n                    const c_array = new Uint8Array(8).fill(0);\r\n                    for (let i = 0; i < 8; i++) {\r\n                        c_array[i] = Number(c_copy % 256n);\r\n                        c_copy = c_copy >> 8n;\r\n                    }\r\n                    a = a - SBox[c_array[0]] ^ SBox[256+c_array[2]] ^ SBox\r\n                }\r\n\r\n            }\r\n        }\r\n        \r\n        return new Uint8Array();\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}