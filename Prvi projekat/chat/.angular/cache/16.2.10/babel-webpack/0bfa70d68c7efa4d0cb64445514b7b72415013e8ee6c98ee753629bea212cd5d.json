{"ast":null,"code":"export class XTEA {\n  constructor() {\n    this.keyByteArray = Uint8Array.from(import.meta.env.NG_APP_XTEA_KEY.split(' ').map(char => parseInt(char)));\n    this.key = [];\n    this.delta = 0x9E3779B9;\n    console.log(this.keyByteArray);\n    for (let i = 0; i < 4; i++) {\n      console.log(parseInt(this.keyByteArray.slice(i * 4, i * 4 + 4).join('')));\n      const fourBytesArray = Uint32Array.from(this.keyByteArray.slice(i * 4, i * 4 + 4));\n      const fourBytes = fourBytesArray[0] << 24 | fourBytesArray[1] << 16 | fourBytesArray[2] << 8 | fourBytesArray[3];\n      console.log(fourBytes);\n      this.key.push(fourBytes);\n    }\n    console.log(this.key);\n  }\n  Encrypt(message) {\n    const blocks = this.Blockify(message);\n    let cyphertext = new Uint32Array(blocks.length);\n    let iv0 = 0;\n    let iv1 = 0;\n    for (let i = 0; i < blocks.length / 2; i += 2) {\n      const u0 = blocks[i] ^ iv0;\n      const u1 = blocks[i + 1] ^ iv1;\n      const [v0, v1] = this.encryptBlock(u0 >>> 0, u1 >>> 0, 32);\n      cyphertext.set([v0, v1], i);\n      iv0 = v0;\n      iv1 = v1;\n    }\n    console.log(cyphertext.join(' '));\n    return cyphertext.join(' ');\n  }\n  Decrypt(message) {\n    const message32Array = Uint32Array.from(message.split(' ').map(char => parseInt(char)));\n    let iv0 = 0;\n    let iv1 = 0;\n    let u0, u1;\n    let plaintext = [];\n    for (let i = 0; i < message32Array.length / 2; i += 2) {\n      [u0, u1] = this.DecryptBlock(message32Array[i], message32Array[i + 1], 32);\n      plaintext.push(u0 ^ iv0);\n      plaintext.push(u1 ^ iv1);\n      iv0 = message32Array[i];\n      iv1 = u1;\n    }\n    return plaintext.join('');\n  }\n  encryptBlock(v0, v1, rounds) {\n    let sum = 0;\n    for (let i = 0; i < rounds; i++) {\n      v0 += (v1 << 4 ^ v1 >> 5) + v1 ^ sum + this.key[sum & 3];\n      sum += this.delta;\n      v1 += (v0 << 4 ^ v0 >> 5) + v0 ^ sum + this.key[sum >> 11 & 3];\n    }\n    return [v0, v1];\n  }\n  DecryptBlock(v0, v1, rounds) {\n    let sum = this.delta * rounds;\n    for (let i = 0; i < rounds; i++) {\n      v1 -= (v0 << 4 ^ v0 >> 5) + v0 ^ sum + this.key[sum >> 11 & 3];\n      sum -= this.delta;\n      v0 -= (v1 << 4 ^ v1 >> 5) + v1 ^ sum + this.key[sum & 3];\n    }\n    return [v0, v1];\n  }\n  Blockify(message) {\n    const txtEncoder = new TextEncoder();\n    let messageInBytes = txtEncoder.encode(message);\n    let paddedMessage = messageInBytes;\n    const paddingRequired = messageInBytes.length % 8;\n    console.log(paddingRequired);\n    if (paddingRequired) {\n      const paddingBytes = new Uint8Array(8 - paddingRequired);\n      paddingBytes.fill(8 - paddingRequired);\n      paddedMessage = new Uint8Array([...messageInBytes, ...paddingBytes]);\n    }\n    let blocks = [];\n    for (let i = 0; i < paddedMessage.length; i += 4) {\n      const fourBytesArray = paddedMessage.slice(i, i + 4);\n      console.log(fourBytesArray);\n      const fourBytes = fourBytesArray[0] << 24 | fourBytesArray[1] << 16 | fourBytesArray[2] << 8 | fourBytesArray[3];\n      blocks.push(fourBytes);\n      console.log(fourBytes);\n    }\n    return blocks;\n  }\n}","map":{"version":3,"names":["XTEA","constructor","keyByteArray","Uint8Array","from","import","meta","env","NG_APP_XTEA_KEY","split","map","char","parseInt","key","delta","console","log","i","slice","join","fourBytesArray","Uint32Array","fourBytes","push","Encrypt","message","blocks","Blockify","cyphertext","length","iv0","iv1","u0","u1","v0","v1","encryptBlock","set","Decrypt","message32Array","plaintext","DecryptBlock","rounds","sum","txtEncoder","TextEncoder","messageInBytes","encode","paddedMessage","paddingRequired","paddingBytes","fill"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\encryption\\XTEA.ts"],"sourcesContent":["import { IEncryption } from \"./IEncryption\";\r\n\r\nexport class XTEA implements IEncryption {\r\n    private keyByteArray = Uint8Array.from(import.meta.env.NG_APP_XTEA_KEY.split(' ').map((char) => parseInt(char)));\r\n    private key : number[] = []\r\n    private delta=0x9E3779B9;\r\n\r\n    constructor() {\r\n        console.log(this.keyByteArray);\r\n        for (let i = 0; i < 4; i++){\r\n            console.log(parseInt(this.keyByteArray.slice(i*4, i*4+4).join('')))\r\n            const fourBytesArray = Uint32Array.from(this.keyByteArray.slice(i*4, i*4+4));\r\n            const fourBytes = fourBytesArray[0] << 24 | fourBytesArray[1] << 16 | fourBytesArray[2] << 8 | fourBytesArray[3];\r\n            console.log(fourBytes)\r\n            this.key.push(fourBytes);\r\n        }\r\n        console.log(this.key)\r\n    }\r\n\r\n    public Encrypt(message: string) : string {\r\n        const blocks = this.Blockify(message);\r\n        let cyphertext = new Uint32Array(blocks.length);\r\n        let iv0 = 0;\r\n        let iv1 = 0;\r\n        for (let i = 0; i < blocks.length / 2; i+=2) {\r\n            const u0 = blocks[i] ^ iv0;\r\n            const u1 = blocks[i + 1] ^ iv1;\r\n            const [v0, v1] = this.encryptBlock(u0 >>> 0, u1 >>> 0, 32);\r\n            cyphertext.set([v0, v1], i);\r\n            iv0 = v0;\r\n            iv1 = v1;\r\n        }\r\n        console.log(cyphertext.join(' '));\r\n        return cyphertext.join(' ');\r\n    }\r\n    public Decrypt(message: string): string {\r\n        const message32Array = Uint32Array.from(message.split(' ').map((char) => parseInt(char)));\r\n        let iv0 = 0;\r\n        let iv1 = 0;\r\n        let u0, u1;\r\n        let plaintext = [];\r\n        for (let i = 0; i < message32Array.length / 2; i+=2) {\r\n            [u0, u1] = this.DecryptBlock(message32Array[i], message32Array[i + 1], 32);\r\n            plaintext.push(u0 ^ iv0);\r\n            plaintext.push(u1 ^ iv1);\r\n            iv0 = message32Array[i];\r\n            iv1 = u1;\r\n        }\r\n        return plaintext.join('');\r\n    }\r\n    \r\n    private encryptBlock(v0: number, v1: number, rounds: number) {\r\n        let sum = 0;\r\n        for (let i = 0; i < rounds; i++) {\r\n            v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + this.key[sum & 3]);\r\n            sum += this.delta;\r\n            v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + this.key[(sum >> 11) & 3]);\r\n        }\r\n        return [v0, v1];\r\n    }\r\n    \r\n    private DecryptBlock(v0: number, v1: number, rounds: number) {\r\n        let sum = this.delta * rounds;\r\n        for (let i = 0; i < rounds; i++) {\r\n            v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + this.key[(sum >> 11) & 3]);\r\n            sum -= this.delta;\r\n            v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + this.key[sum & 3]);\r\n        }\r\n        return [v0, v1];\r\n    }\r\n\r\n    private Blockify(message: string) {\r\n        const txtEncoder = new TextEncoder();\r\n        let messageInBytes = txtEncoder.encode(message);\r\n        let paddedMessage = messageInBytes;\r\n        const paddingRequired = messageInBytes.length % 8;\r\n        console.log(paddingRequired);\r\n        if (paddingRequired){\r\n            const paddingBytes = new Uint8Array(8 - paddingRequired);\r\n            paddingBytes.fill(8 - paddingRequired)\r\n            paddedMessage = new Uint8Array([...messageInBytes, ...paddingBytes]);\r\n        }\r\n        let blocks = [];\r\n        for (let i = 0; i < paddedMessage.length; i += 4) {\r\n            const fourBytesArray = paddedMessage.slice(i, i + 4);\r\n            console.log(fourBytesArray);\r\n            const fourBytes = fourBytesArray[0] << 24 | fourBytesArray[1] << 16 | fourBytesArray[2] << 8 | fourBytesArray[3];\r\n            blocks.push(fourBytes);\r\n            console.log(fourBytes);\r\n        }\r\n        return blocks;\r\n    }\r\n\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}