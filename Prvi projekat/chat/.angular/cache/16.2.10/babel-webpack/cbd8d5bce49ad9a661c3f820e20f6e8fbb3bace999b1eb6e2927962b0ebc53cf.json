{"ast":null,"code":"import { SBox } from \"./tiger-s-boxes\";\nexport class TigerHash {\n  padding(data) {\n    //padding\n    const dataLength = data.length;\n    const paddingLength = 56 - dataLength % 56 === 0 ? 56 : 56 - dataLength % 56;\n    const padding = new Uint8Array(paddingLength).fill(0x00);\n    padding[0] = 0x01;\n    const littleEndianLength = new Uint8Array(8).fill(0x00);\n    console.log(dataLength);\n    let dataLengthPrep = dataLength;\n    for (let i = 0; i < 8; i++) {\n      littleEndianLength[i] = dataLengthPrep % 256;\n      //potrebno je celobrojno deljenje ali typescript :(\n      dataLengthPrep = dataLengthPrep >>> 8;\n    }\n    const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\n    return paddedData;\n  }\n  hash(data) {\n    let h0 = 0x0123456789abcdefn;\n    let h1 = 0xfedcba9876543210n;\n    let h2 = 0xf096a5b4c3d2e187n;\n    data = this.padding(data);\n    for (let block = 0; block < data.length; block += 64) {\n      let a = h0;\n      let b = h1;\n      let c = h2;\n      const segment = data.slice(block, block + 64);\n      const w = new BigUint64Array(8);\n      for (let i = 0; i < 8; i++) {\n        w[i] = segment.slice(i * 8, i * 8 + 8).reduce((acc, curr, index) => acc + BigInt(curr) * 256n ** BigInt(index), 0n);\n      }\n      for (let pass = 0; pass < 3; pass++) {\n        for (let round = 0; round < 7; round++) {\n          c = c ^ w[round];\n          let c_copy = c;\n          const c_array = new Uint8Array(8).fill(0);\n          for (let i = 0; i < 8; i++) {\n            c_array[i] = Number(c_copy % 256n);\n            c_copy = c_copy >> 8n;\n          }\n          a = a - SBox[c_array[0]] ^ SBox[256 + c_array[2]] ^ SBox[512 + c_array[4]] ^ SBox[768 + c_array[6]];\n          b = b + SBox[768 + c_array[1]] ^ SBox[512 + c_array[3]] ^ SBox[256 + c_array[5]] ^ SBox[c_array[7]];\n          b = b * BigInt(round + 1);\n        }\n        if (pass === 0) {\n          w[0] = w[0] - (w[7] ^ 0xa5a5a5a5a5a5a5a5n);\n          w[1] = w[1] ^ w[0];\n          w[2] = w[2] + w[1];\n          w[3] = w[3] - (w[2] ^ -w[1] << BigInt(19));\n          w[4] = w[4] ^ w[3];\n          w[5] = w[5] + w[4];\n          w[6] = w[6] - (w[5] ^ -w[4] >> BigInt(23));\n          w[7] = w[7] ^ w[6];\n        }\n        if (pass === 1) {\n          w[0] = w[0] + w[7];\n          w[1] = w[1] - (w[0] ^ -w[0] << BigInt(19));\n          w[2] = w[2] ^ w[1];\n          w[3] = w[3] + w[2];\n          w[4] = w[4] - (w[3] ^ -w[2] >> BigInt(23));\n          w[5] = w[5] ^ w[4];\n          w[6] = w[6] + w[5];\n          w[7] = w[7] - (w[6] ^ 0x0123456789abcdefn);\n        }\n      }\n      h0 = (h0 + a) % 2n ** 64n;\n      h1 = (h1 + b) % 2n ** 64n;\n      h2 = (h2 + c) % 2n ** 64n;\n    }\n    const result = new Uint8Array(192);\n    const h0Array = new Uint8Array(8);\n    const h1Array = new Uint8Array(8);\n    const h2Array = new Uint8Array(8);\n    for (let i = 0; i < 8; i++) {\n      h0Array[i] = Number(h0 % 256n);\n      h1Array[i] = Number(h1 % 256n);\n      h2Array[i] = Number(h2 % 256n);\n      h0 = h0 >> 8n;\n      h1 = h1 >> 8n;\n      h2 = h2 >> 8n;\n    }\n    const hash = new Uint8Array([...h0Array, ...h1Array, ...h2Array]);\n    return hash.reduce((acc, curr) => acc + curr.toString(16).padStart(2, '0'), '');\n  }\n}","map":{"version":3,"names":["SBox","TigerHash","padding","data","dataLength","length","paddingLength","Uint8Array","fill","littleEndianLength","console","log","dataLengthPrep","i","paddedData","hash","h0","h1","h2","block","a","b","c","segment","slice","w","BigUint64Array","reduce","acc","curr","index","BigInt","pass","round","c_copy","c_array","Number","result","h0Array","h1Array","h2Array","toString","padStart"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\hash\\TigerHash.ts"],"sourcesContent":["import { IHash } from \"./IHash\";\r\nimport { SBox } from \"./tiger-s-boxes\";\r\n\r\nexport class TigerHash implements IHash {\r\n    padding(data: Uint8Array): Uint8Array {\r\n        //padding\r\n        const dataLength = data.length;\r\n        const paddingLength = (56 - (dataLength % 56) === 0) ? 56 : 56 - (dataLength % 56);\r\n        const padding = new Uint8Array(paddingLength).fill(0x00);\r\n        padding[0] = 0x01;\r\n        const littleEndianLength = new Uint8Array(8).fill(0x00);\r\n        console.log(dataLength)\r\n        let dataLengthPrep = dataLength\r\n        for (let i = 0; i < 8; i++) {\r\n            littleEndianLength[i] = dataLengthPrep % 256;\r\n            //potrebno je celobrojno deljenje ali typescript :(\r\n            dataLengthPrep = dataLengthPrep >>> 8;\r\n        }\r\n        const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\r\n\r\n        return paddedData;\r\n    }\r\n\r\n    \r\n    hash(data: Uint8Array): string {\r\n        let h0 = 0x0123456789ABCDEFn\r\n        let h1 = 0xFEDCBA9876543210n\r\n        let h2 = 0xF096A5B4C3D2E187n\r\n\r\n        data = this.padding(data);\r\n        for (let block = 0; block < data.length; block += 64) {\r\n            let a = h0;\r\n            let b = h1;\r\n            let c = h2;\r\n\r\n            const segment = data.slice(block, block + 64);\r\n            const w = new BigUint64Array(8);\r\n            for (let i = 0; i < 8; i++) {\r\n                w[i] = segment.slice(i*8, i*8+8).reduce((acc, curr, index) => acc + BigInt(curr) * (256n ** BigInt(index)), 0n);\r\n            }\r\n\r\n\r\n            for (let pass = 0; pass < 3; pass++) {\r\n                for (let round = 0; round < 7; round++) {\r\n                    c = c ^ w[round];\r\n                    let c_copy = c;\r\n                    const c_array = new Uint8Array(8).fill(0);\r\n                    for (let i = 0; i < 8; i++) {\r\n                        c_array[i] = Number(c_copy % 256n);\r\n                        c_copy = c_copy >> 8n;\r\n                    }\r\n                    a = a - SBox[c_array[0]] ^ SBox[256+c_array[2]] ^ SBox[512+c_array[4]] ^ SBox[768+c_array[6]];\r\n                    b = b + SBox[768+c_array[1]] ^ SBox[512+c_array[3]] ^ SBox[256+c_array[5]] ^ SBox[c_array[7]];\r\n                    b = b*BigInt(round+1)\r\n                }\r\n\r\n                if (pass === 0) {\r\n                    w[0] = w[0] - (w[7] ^ 0xA5A5A5A5A5A5A5A5n)\r\n                    w[1] = w[1] ^ w[0]\r\n                    w[2] = w[2] + w[1]\r\n                    w[3] = w[3] - (w[2] ^ ((-w[1]) << BigInt(19)))\r\n                    w[4] = w[4] ^ w[3]\r\n                    w[5] = w[5] + w[4]\r\n                    w[6] = w[6] - (w[5] ^ ((-w[4]) >> BigInt(23)))\r\n                    w[7] = w[7] ^ w[6]\r\n                }\r\n                if (pass === 1){\r\n                    w[0] = w[0] + w[7]\r\n                    w[1] = w[1] - (w[0] ^ ((-w[0]) << BigInt(19)))\r\n                    w[2] = w[2] ^ w[1]\r\n                    w[3] = w[3] + w[2]\r\n                    w[4] = w[4] - (w[3] ^ ((-w[2]) >> BigInt(23)))\r\n                    w[5] = w[5] ^ w[4]\r\n                    w[6] = w[6] + w[5]\r\n                    w[7] = w[7] - (w[6] ^ 0x0123456789ABCDEFn)\r\n                }\r\n            }\r\n            h0 = (h0 + a) % 2n**64n;\r\n            h1 = (h1 + b) % 2n**64n;\r\n            h2 = (h2 + c) % 2n**64n;\r\n        }\r\n        const result = new Uint8Array(192);\r\n        const h0Array = new Uint8Array(8);\r\n        const h1Array = new Uint8Array(8);\r\n        const h2Array = new Uint8Array(8);\r\n        for (let i = 0; i < 8; i++) {\r\n            h0Array[i] = Number(h0 % 256n);\r\n            h1Array[i] = Number(h1 % 256n);\r\n            h2Array[i] = Number(h2 % 256n);\r\n            h0 = h0 >> 8n;\r\n            h1 = h1 >> 8n;\r\n            h2 = h2 >> 8n;\r\n        }\r\n        const hash = new Uint8Array([...h0Array, ...h1Array, ...h2Array]);\r\n        return hash.reduce((acc, curr) => acc + curr.toString(16).padStart(2, '0'), '');\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}