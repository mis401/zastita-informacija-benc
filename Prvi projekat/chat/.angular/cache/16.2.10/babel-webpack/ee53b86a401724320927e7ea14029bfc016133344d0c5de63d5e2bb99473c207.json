{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.rc4 = new RC4();\n    this.xtea = new XTEA();\n    this.tigerHash = new TigerHash();\n    this.userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.username = null;\n    this.id = null;\n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', crypto => {\n      let message = null;\n      if (crypto.file) message = this.receiveFile(crypto);else message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  connect() {\n    this.socket.connect();\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  sendMessage(message, encryptionType) {\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType);\n    const messageObject = {\n      algorithm: encryptionType,\n      text: message,\n      crypto: crypto,\n      owner: true,\n      senderName: this.username,\n      senderId: this.id,\n      file: false,\n      fileContent: null\n    };\n    this.messageStream.next({\n      ...messageObject\n    });\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file, encryptionType) {\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => {\n      let crypto = this.encryptMessage(reader.result, encryptionType);\n      crypto += this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0))));\n      const encryptedFile = new File([crypto], file.name, {\n        type: file.type\n      });\n      const messageObject = {\n        algorithm: encryptionType,\n        text: file.type,\n        crypto: file.type,\n        owner: true,\n        senderName: this.username,\n        senderId: this.id,\n        file: true,\n        fileContent: encryptedFile\n      };\n      this.messageStream.next({\n        ...messageObject\n      });\n      messageObject.text = null;\n      this.socket.emit('message', messageObject);\n    };\n  }\n  receiveFile(message) {\n    const file = this.decryptFile(message);\n    const msg = {\n      algorithm: message.algorithm,\n      text: message.name,\n      crypto: message.crypto,\n      owner: message.owner,\n      senderName: message.senderName,\n      senderId: message.senderId,\n      file: true,\n      fileContent: file\n    };\n  }\n  encryptMessage(message, encryptionType) {\n    if (encryptionType === EncryptionType.None) return message;else if (encryptionType === EncryptionType.RC4) return this.rc4.Encrypt(message);else if (encryptionType === EncryptionType.XTEA) return this.xtea.Encrypt(message);else return message;\n  }\n  decryptMessage(cryptoMsg) {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None) return cryptoMsg;else if (cryptoMsg.algorithm === EncryptionType.RC4) text = this.rc4.Decrypt(cryptoMsg.crypto);else if (cryptoMsg.algorithm === EncryptionType.XTEA) text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg = {\n      algorithm: cryptoMsg.algorithm,\n      text: text,\n      crypto: cryptoMsg.crypto,\n      owner: cryptoMsg.senderId === this.id,\n      senderName: cryptoMsg.senderName,\n      senderId: cryptoMsg.senderId,\n      file: false,\n      fileContent: null\n    };\n    return msg;\n  }\n  decryptFile(cryptoMsg) {\n    let file = null;\n    const hash = cryptoMsg.crypto.slice(-24);\n    const crypto = cryptoMsg.crypto.slice(0, -24);\n    if (this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0)))) !== hash) return null;\n    const fileReader = new FileReader();\n    fileReader.readAsBinaryString(cryptoMsg.fileContent);\n    fileReader.onload = () => {\n      const fullMsg = this.decryptMessage({\n        ...cryptoMsg,\n        crypto: fileReader.result\n      });\n      file = new File([fullMsg.text], `dekriptovan fajl`, {\n        type: cryptoMsg.text\n      });\n    };\n    return file;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","selectId","selectUsername","RC4","XTEA","EncryptionType","TigerHash","ChatService","constructor","store","rc4","xtea","tigerHash","userinfo$","select","socket","import","meta","env","NG_APP_API_URL","messageStream","username","id","subscribe","on","crypto","message","file","receiveFile","decryptMessage","next","connect","disconnect","sendMessage","encryptionType","console","log","trim","encryptMessage","messageObject","algorithm","text","owner","senderName","senderId","fileContent","emit","sendFile","reader","FileReader","readAsBinaryString","onload","result","hash","Uint8Array","from","split","map","char","charCodeAt","encryptedFile","File","name","type","decryptFile","msg","None","Encrypt","cryptoMsg","Decrypt","slice","fileReader","fullMsg","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\nimport { selectEncryptionType, selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  rc4 = new RC4();\n  xtea = new XTEA();\n  tigerHash = new TigerHash();\n  userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', (crypto) => {\n      let message = null;\n      if (crypto.file)\n        message = this.receiveFile(crypto);\n      else\n        message = this.decryptMessage(crypto);\n      this.messageStream.next(message!);\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.disconnect();\n  }\n  sendMessage(message: string, encryptionType: EncryptionType){\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType)\n    const messageObject : Message = {algorithm: encryptionType, text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!, file: false, fileContent: null} \n    this.messageStream.next({...messageObject});\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file: File, encryptionType: EncryptionType){\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onload = () => {\n      let crypto = this.encryptMessage(reader.result as string, encryptionType);\n      crypto += this.tigerHash.hash(Uint8Array.from(crypto.split(``).map((char) => char.charCodeAt(0))));\n      const encryptedFile = new File([crypto], file.name, {type: file.type});\n      const messageObject : Message = {algorithm: encryptionType, text:file.type, crypto:file.type, owner: true, senderName: this.username!, senderId: this.id!, file: true, fileContent: encryptedFile} \n      this.messageStream.next({...messageObject});\n      messageObject.text = null;\n      this.socket.emit('message', messageObject);\n    }\n  }\n\n  receiveFile(message: Message){\n    const file = this.decryptFile(message);\n    const msg: Message = {\n      algorithm: message.algorithm,\n      text: message.name,\n      crypto: message.crypto,\n      owner: message.owner,\n      senderName: message.senderName,\n      senderId: message.senderId,\n      file: true,\n      fileContent: file\n    }\n   }\n  encryptMessage(message: string, encryptionType: EncryptionType): string{\n    if (encryptionType === EncryptionType.None)\n      return message;\n    else if (encryptionType === EncryptionType.RC4)\n      return this.rc4.Encrypt(message);\n    else if (encryptionType === EncryptionType.XTEA)\n      return this.xtea.Encrypt(message);\n    else\n      return message;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None)\n      return cryptoMsg;\n    else if (cryptoMsg.algorithm === EncryptionType.RC4)\n      text = this.rc4.Decrypt(cryptoMsg.crypto);\n    else if (cryptoMsg.algorithm === EncryptionType.XTEA)\n      text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg: Message = {algorithm: cryptoMsg.algorithm, text:text, crypto:cryptoMsg.crypto, owner: cryptoMsg.senderId === this.id, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId, file: false, fileContent: null};\n    return msg;\n  }\n\n  decryptFile(cryptoMsg: Message): File | null {\n    let file: File | null = null;\n    const hash = cryptoMsg.crypto.slice(-24);\n    const crypto = cryptoMsg.crypto.slice(0, -24);\n    if (this.tigerHash.hash(Uint8Array.from(crypto.split(``).map((char) => char.charCodeAt(0)))) !== hash)\n      return null;\n    const fileReader = new FileReader();\n    fileReader.readAsBinaryString(cryptoMsg.fileContent!);\n    fileReader.onload = () => {\n      const fullMsg = this.decryptMessage({...cryptoMsg, crypto: fileReader.result as string});\n      file = new File([fullMsg.text!], `dekriptovan fajl`, {type: cryptoMsg.text!});\n    }\n  return file;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}