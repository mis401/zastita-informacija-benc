{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.username = null;\n    this.id = null;\n    this.socket.on('messageRec', crypto => {\n      const message = this.decryptMessage(crypto);\n      console.log(message);\n      this.messageStream.next(message);\n    });\n    zip(this.store.select('username'), this.store.select('id')).subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n  }\n  connect() {\n    this.socket.on('connect', () => {\n      console.log(this.socket.id);\n    });\n  }\n  disconnect() {\n    this.socket.disconnect();\n    sendMessage(message, string);\n    {\n      message = message.trim();\n      const crypto = this.encryptMessage(message);\n      this.socket.emit('message', crypto);\n      this.messageStream.next({\n        text: message,\n        crypto: crypto,\n        owner: true,\n        senderName: this.username,\n        senderId: this.id\n      });\n    }\n    encryptMessage(message, string);\n    string;\n    {\n      //todo\n      return `crypto ${message}`;\n    }\n    decryptMessage(cryptoMsg, Message);\n    Message;\n    {\n      //todo\n      return {\n        text: 'decrypt',\n        crypto: 'crypto',\n        owner: false,\n        senderName: cryptoMsg.senderName,\n        senderId: cryptoMsg.senderId\n      };\n    }\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","ChatService","constructor","store","socket","import","meta","env","NG_APP_API_URL","messageStream","username","id","on","crypto","message","decryptMessage","console","log","next","select","subscribe","connect","disconnect","sendMessage","string","trim","encryptMessage","emit","text","owner","senderName","senderId","cryptoMsg","Message","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.socket.on('messageRec', (crypto) => {\n      const message = this.decryptMessage(crypto);\n      console.log(message);\n      this.messageStream.next(message);\n    });\n    zip(this.store.select('username'), this.store.select('id')).subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.on('connect', () => {\n      console.log(this.socket.id);\n    })\n  }\n  disconnect(){\n    this.socket.disconnect();\n  sendMessage(message: string){\n    message = message.trim();\n    const crypto = this.encryptMessage(message)\n    this.socket.emit('message', crypto);\n    this.messageStream.next({text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!});\n  }\n  encryptMessage(message: string): string{\n    //todo\n    return `crypto ${message}`;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    //todo\n    return {text:'decrypt', crypto:'crypto', owner: false, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId};\n  }\n}\n"],"mappings":"AACA,SAASA,OAAO,EAAEC,GAAG,QAAQ,MAAM;AACnC,SAAQC,EAAE,QAAO,kBAAkB;;;AAQnC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,KAAuB;IAAvB,KAAAA,KAAK,GAALA,KAAK;IAFzB,KAAAC,MAAM,GAAGJ,EAAE,CAACK,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,cAAc,CAAC;IAC3C,KAAAC,aAAa,GAAqB,IAAIX,OAAO,EAAW;IAYxD,KAAAY,QAAQ,GAAkB,IAAI;IAC9B,KAAAC,EAAE,GAAkB,IAAI;IAXtB,IAAI,CAACP,MAAM,CAACQ,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAI;MACtC,MAAMC,OAAO,GAAG,IAAI,CAACC,cAAc,CAACF,MAAM,CAAC;MAC3CG,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MACpB,IAAI,CAACL,aAAa,CAACS,IAAI,CAACJ,OAAO,CAAC;IAClC,CAAC,CAAC;IACFf,GAAG,CAAC,IAAI,CAACI,KAAK,CAACgB,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,CAAChB,KAAK,CAACgB,MAAM,CAAC,IAAI,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAACV,QAAQ,EAAEC,EAAE,CAAC,KAAI;MACvF,IAAI,CAACD,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACd,CAAC,CAAC;EACJ;EAKAU,OAAOA,CAAA;IACL,IAAI,CAACjB,MAAM,CAACQ,EAAE,CAAC,SAAS,EAAE,MAAK;MAC7BI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,MAAM,CAACO,EAAE,CAAC;IAC7B,CAAC,CAAC;EACJ;EACAW,UAAUA,CAAA;IACR,IAAI,CAAClB,MAAM,CAACkB,UAAU,EAAE;IAC1BC,WAAW,CAACT,OAAO,EAAEU,MAAM,CAAC;IAAA;MAC1BV,OAAO,GAAGA,OAAO,CAACW,IAAI,EAAE;MACxB,MAAMZ,MAAM,GAAG,IAAI,CAACa,cAAc,CAACZ,OAAO,CAAC;MAC3C,IAAI,CAACV,MAAM,CAACuB,IAAI,CAAC,SAAS,EAAEd,MAAM,CAAC;MACnC,IAAI,CAACJ,aAAa,CAACS,IAAI,CAAC;QAACU,IAAI,EAACd,OAAO;QAAED,MAAM,EAACA,MAAM;QAAEgB,KAAK,EAAE,IAAI;QAAEC,UAAU,EAAE,IAAI,CAACpB,QAAS;QAAEqB,QAAQ,EAAE,IAAI,CAACpB;MAAG,CAAC,CAAC;;IAErHe,cAAc,CAACZ,OAAO,EAAEU,MAAM,CAAC;IAAEA,MAAM;IAAA;MACrC;MACA,OAAO,UAAUV,OAAO,EAAE;;IAE5BC,cAAc,CAACiB,SAAS,EAAEC,OAAO,CAAC;IAAEA,OAAO;IAAC;MAC1C;MACA,OAAO;QAACL,IAAI,EAAC,SAAS;QAAEf,MAAM,EAAC,QAAQ;QAAEgB,KAAK,EAAE,KAAK;QAAEC,UAAU,EAAEE,SAAS,CAACF,UAAU;QAAEC,QAAQ,EAAEC,SAAS,CAACD;MAAQ,CAAC;;EAE1H;EAAC,QAAAG,CAAA,G;qBAxCYjC,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtC,WAAW;IAAAuC,OAAA,EAAXvC,WAAW,CAAAwC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}