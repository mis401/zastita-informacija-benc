{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.rc4 = new RC4();\n    this.xtea = new XTEA();\n    this.userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.username = null;\n    this.id = null;\n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', crypto => {\n      const message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  connect() {\n    this.socket.connect();\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  sendMessage(message, encryptionType) {\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType);\n    const messageObject = {\n      text: message,\n      crypto: crypto,\n      owner: true,\n      senderName: this.username,\n      senderId: this.id\n    };\n    this.messageStream.next({\n      ...messageObject\n    });\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  encryptMessage(message) {\n    const crypto = this.xtea.Encrypt(message);\n    return crypto;\n  }\n  decryptMessage(cryptoMsg) {\n    const text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg = {\n      text: text,\n      crypto: cryptoMsg.crypto,\n      owner: cryptoMsg.senderId === this.id,\n      senderName: cryptoMsg.senderName,\n      senderId: cryptoMsg.senderId\n    };\n    return msg;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","selectId","selectUsername","RC4","XTEA","ChatService","constructor","store","rc4","xtea","userinfo$","select","socket","import","meta","env","NG_APP_API_URL","messageStream","username","id","subscribe","on","crypto","message","decryptMessage","next","connect","disconnect","sendMessage","encryptionType","console","log","trim","encryptMessage","messageObject","text","owner","senderName","senderId","emit","Encrypt","cryptoMsg","Decrypt","msg","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\nimport { selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  rc4 = new RC4();\n  xtea = new XTEA();\n  userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', (crypto) => {\n      const message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.disconnect();\n  }\n  sendMessage(message: string, encryptionType: EncryptionType){\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType)\n    const messageObject : Message = {text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!} \n    this.messageStream.next({...messageObject});\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  encryptMessage(message: string): string{\n    const crypto = this.xtea.Encrypt(message);\n    return crypto;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    const text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg: Message = {text:text, crypto:cryptoMsg.crypto, owner: cryptoMsg.senderId === this.id, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId};\n    return msg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}