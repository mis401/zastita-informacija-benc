{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.rc4 = new RC4();\n    this.xtea = new XTEA();\n    this.tigerHash = new TigerHash();\n    this.userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.username = null;\n    this.id = null;\n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', crypto => {\n      let message = null;\n      if (crypto.file) message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  connect() {\n    this.socket.connect();\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  sendMessage(message, encryptionType) {\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType);\n    const messageObject = {\n      algorithm: encryptionType,\n      text: message,\n      crypto: crypto,\n      owner: true,\n      senderName: this.username,\n      senderId: this.id,\n      file: false\n    };\n    this.messageStream.next({\n      ...messageObject\n    });\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file, encryptionType) {\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      let crypto = this.encryptMessage(reader.result, encryptionType);\n      crypto += this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0))));\n      const messageObject = {\n        algorithm: encryptionType,\n        text: null,\n        crypto: crypto,\n        owner: true,\n        senderName: this.username,\n        senderId: this.id,\n        file: true\n      };\n      this.messageStream.next({\n        ...messageObject\n      });\n      messageObject.text = null;\n      this.socket.emit('message', messageObject);\n    };\n  }\n  receiveFile(message) {\n    const crypto = message.text?.slice(0, message.text.length - 24);\n    const hash = message.text?.slice(message.text.length - 24);\n    const newHash = this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0))));\n    if (hash !== newHash) console.log(`Hashes don't match`);\n    const file = this.decryptMessage({\n      ...message,\n      crypto: crypto\n    });\n  }\n  encryptMessage(message, encryptionType) {\n    if (encryptionType === EncryptionType.None) return message;else if (encryptionType === EncryptionType.RC4) return this.rc4.Encrypt(message);else if (encryptionType === EncryptionType.XTEA) return this.xtea.Encrypt(message);else return message;\n  }\n  decryptMessage(cryptoMsg) {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None) return cryptoMsg;else if (cryptoMsg.algorithm === EncryptionType.RC4) text = this.rc4.Decrypt(cryptoMsg.crypto);else if (cryptoMsg.algorithm === EncryptionType.XTEA) text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg = {\n      algorithm: cryptoMsg.algorithm,\n      text: text,\n      crypto: cryptoMsg.crypto,\n      owner: cryptoMsg.senderId === this.id,\n      senderName: cryptoMsg.senderName,\n      senderId: cryptoMsg.senderId,\n      file: false\n    };\n    return msg;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","selectId","selectUsername","RC4","XTEA","EncryptionType","TigerHash","ChatService","constructor","store","rc4","xtea","tigerHash","userinfo$","select","socket","import","meta","env","NG_APP_API_URL","messageStream","username","id","subscribe","on","crypto","message","file","decryptMessage","next","connect","disconnect","sendMessage","encryptionType","console","log","trim","encryptMessage","messageObject","algorithm","text","owner","senderName","senderId","emit","sendFile","reader","FileReader","readAsText","onload","result","hash","Uint8Array","from","split","map","char","charCodeAt","receiveFile","slice","length","newHash","None","Encrypt","cryptoMsg","Decrypt","msg","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\nimport { selectEncryptionType, selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  rc4 = new RC4();\n  xtea = new XTEA();\n  tigerHash = new TigerHash();\n  userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', (crypto) => {\n      let message = null;\n      if (crypto.file)\n\n      message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.disconnect();\n  }\n  sendMessage(message: string, encryptionType: EncryptionType){\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType)\n    const messageObject : Message = {algorithm: encryptionType, text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!, file: false} \n    this.messageStream.next({...messageObject});\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file: File, encryptionType: EncryptionType){\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      let crypto = this.encryptMessage(reader.result as string, encryptionType);\n      crypto += this.tigerHash.hash(Uint8Array.from(crypto.split(``).map((char) => char.charCodeAt(0))));\n      const messageObject : Message = {algorithm: encryptionType, text:null, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!, file: true} \n      this.messageStream.next({...messageObject});\n      messageObject.text = null;\n      this.socket.emit('message', messageObject);\n    }\n  }\n\n  receiveFile(message: Message){\n    const crypto = message.text?.slice(0, message.text.length - 24);\n    const hash = message.text?.slice(message.text.length - 24);\n    const newHash = this.tigerHash.hash(Uint8Array.from(crypto!.split(``).map((char) => char.charCodeAt(0))));\n    if (hash !== newHash)\n      console.log(`Hashes don't match`);\n    const file = this.decryptMessage({...message, crypto: crypto!});\n  }\n  encryptMessage(message: string, encryptionType: EncryptionType): string{\n    if (encryptionType === EncryptionType.None)\n      return message;\n    else if (encryptionType === EncryptionType.RC4)\n      return this.rc4.Encrypt(message);\n    else if (encryptionType === EncryptionType.XTEA)\n      return this.xtea.Encrypt(message);\n    else\n      return message;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None)\n      return cryptoMsg;\n    else if (cryptoMsg.algorithm === EncryptionType.RC4)\n      text = this.rc4.Decrypt(cryptoMsg.crypto);\n    else if (cryptoMsg.algorithm === EncryptionType.XTEA)\n      text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg: Message = {algorithm: cryptoMsg.algorithm, text:text, crypto:cryptoMsg.crypto, owner: cryptoMsg.senderId === this.id, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId, file: false};\n    return msg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}