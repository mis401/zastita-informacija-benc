{"ast":null,"code":"export class TigerHash {\n  padding(data) {\n    //padding\n    const dataLength = data.length;\n    const paddingLength = 56 - dataLength % 56 === 0 ? 56 : 56 - dataLength % 56;\n    const padding = new Uint8Array(paddingLength).fill(0x00);\n    padding[0] = 0x01;\n    const littleEndianLength = new Uint8Array(8).fill(0x00);\n    console.log(dataLength);\n    let dataLengthPrep = dataLength;\n    for (let i = 0; i < 8; i++) {\n      littleEndianLength[i] = dataLengthPrep % 256;\n      //potrebno je celobrojno deljenje ali typescript :(\n      dataLengthPrep = dataLengthPrep >>> 8;\n    }\n    const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\n    return paddedData;\n  }\n  blockOperation(data) {\n    const blocks = [];\n    for (let i = 0; i < data.length; i += 64) {\n      const block = data.slice(i, i + 64);\n      blocks.push(block);\n    }\n    return new Uint8Array();\n  }\n  hash(data) {\n    let h0 = 0x0123456789abcdefn;\n    let h1 = 0xfedcba9876543210n;\n    let h2 = 0xf096a5b4c3d2e187n;\n    data = this.padding(data);\n    return new Uint8Array();\n  }\n}","map":{"version":3,"names":["TigerHash","padding","data","dataLength","length","paddingLength","Uint8Array","fill","littleEndianLength","console","log","dataLengthPrep","i","paddedData","blockOperation","blocks","block","slice","push","hash","h0","h1","h2"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\hash\\TigerHash.ts"],"sourcesContent":["import { IHash } from \"./IHash\";\r\n\r\nexport class TigerHash implements IHash {\r\n    padding(data: Uint8Array): Uint8Array {\r\n        //padding\r\n        const dataLength = data.length;\r\n        const paddingLength = (56 - (dataLength % 56) === 0) ? 56 : 56 - (dataLength % 56);\r\n        const padding = new Uint8Array(paddingLength).fill(0x00);\r\n        padding[0] = 0x01;\r\n        const littleEndianLength = new Uint8Array(8).fill(0x00);\r\n        console.log(dataLength)\r\n        let dataLengthPrep = dataLength\r\n        for (let i = 0; i < 8; i++) {\r\n            littleEndianLength[i] = dataLengthPrep % 256;\r\n            //potrebno je celobrojno deljenje ali typescript :(\r\n            dataLengthPrep = dataLengthPrep >>> 8;\r\n        }\r\n        const paddedData = new Uint8Array([...data, ...padding, ...littleEndianLength]);\r\n\r\n        return paddedData;\r\n    }\r\n\r\n    blockOperation(data: Uint8Array): Uint8Array {\r\n        const blocks = [];\r\n        for (let i = 0; i < data.length; i += 64) {\r\n            const block = data.slice(i, i + 64);\r\n            blocks.push(block);\r\n        }\r\n        return new Uint8Array();\r\n    }\r\n    \r\n    hash(data: Uint8Array): Uint8Array {\r\n        let h0 = 0x0123456789ABCDEFn\r\n        let h1 = 0xFEDCBA9876543210n\r\n        let h2 = 0xF096A5B4C3D2E187n\r\n\r\n        data = this.padding(data);\r\n\r\n        return new Uint8Array();\r\n    }\r\n}"],"mappings":"AAEA,OAAM,MAAOA,SAAS;EAClBC,OAAOA,CAACC,IAAgB;IACpB;IACA,MAAMC,UAAU,GAAGD,IAAI,CAACE,MAAM;IAC9B,MAAMC,aAAa,GAAI,EAAE,GAAIF,UAAU,GAAG,EAAG,KAAK,CAAC,GAAI,EAAE,GAAG,EAAE,GAAIA,UAAU,GAAG,EAAG;IAClF,MAAMF,OAAO,GAAG,IAAIK,UAAU,CAACD,aAAa,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;IACxDN,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;IACjB,MAAMO,kBAAkB,GAAG,IAAIF,UAAU,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACvDE,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;IACvB,IAAIQ,cAAc,GAAGR,UAAU;IAC/B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxBJ,kBAAkB,CAACI,CAAC,CAAC,GAAGD,cAAc,GAAG,GAAG;MAC5C;MACAA,cAAc,GAAGA,cAAc,KAAK,CAAC;;IAEzC,MAAME,UAAU,GAAG,IAAIP,UAAU,CAAC,CAAC,GAAGJ,IAAI,EAAE,GAAGD,OAAO,EAAE,GAAGO,kBAAkB,CAAC,CAAC;IAE/E,OAAOK,UAAU;EACrB;EAEAC,cAAcA,CAACZ,IAAgB;IAC3B,MAAMa,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,IAAI,CAACE,MAAM,EAAEQ,CAAC,IAAI,EAAE,EAAE;MACtC,MAAMI,KAAK,GAAGd,IAAI,CAACe,KAAK,CAACL,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC;MACnCG,MAAM,CAACG,IAAI,CAACF,KAAK,CAAC;;IAEtB,OAAO,IAAIV,UAAU,EAAE;EAC3B;EAEAa,IAAIA,CAACjB,IAAgB;IACjB,IAAIkB,EAAE,GAAG,mBAAmB;IAC5B,IAAIC,EAAE,GAAG,mBAAmB;IAC5B,IAAIC,EAAE,GAAG,mBAAmB;IAE5BpB,IAAI,GAAG,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC;IAEzB,OAAO,IAAII,UAAU,EAAE;EAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}