{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { selectEncryptionType, selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.rc4 = new RC4();\n    this.xtea = new XTEA();\n    this.userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', crypto => {\n      this.store.select(selectEncryptionType).subscribe(encryptionType => {\n        const message = this.decryptMessage(crypto);\n        this.messageStream.next(message);\n      });\n    }, username, string | null, null);\n    id: string | null;\n    null;\n    connect();\n    {\n      this.socket.connect();\n    }\n    disconnect();\n    {\n      this.socket.disconnect();\n    }\n    sendMessage(message, string, encryptionType, EncryptionType);\n    {\n      console.log(this.username);\n      console.log(this.id);\n      message = message.trim();\n      const crypto = this.encryptMessage(message, encryptionType);\n      const messageObject = {\n        text: message,\n        crypto: crypto,\n        owner: true,\n        senderName: this.username,\n        senderId: this.id\n      };\n      this.messageStream.next({\n        ...messageObject\n      });\n      messageObject.text = null;\n      this.socket.emit('message', messageObject);\n    }\n    encryptMessage(message, string, encryptionType, EncryptionType);\n    string;\n    {\n      if (encryptionType === EncryptionType.None) return message;else if (encryptionType === EncryptionType.RC4) return this.rc4.Encrypt(message);else if (encryptionType === EncryptionType.XTEA) return this.xtea.Encrypt(message);else return message;\n    }\n    decryptMessage(cryptoMsg, Message);\n    Message;\n    {\n      const text = this.xtea.Decrypt(cryptoMsg.crypto);\n      const msg = {\n        text: text,\n        crypto: cryptoMsg.crypto,\n        owner: cryptoMsg.senderId === this.id,\n        senderName: cryptoMsg.senderName,\n        senderId: cryptoMsg.senderId\n      };\n      return msg;\n    }\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","selectEncryptionType","selectId","selectUsername","RC4","XTEA","EncryptionType","ChatService","constructor","store","rc4","xtea","userinfo$","select","socket","import","meta","env","NG_APP_API_URL","messageStream","subscribe","username","id","on","crypto","encryptionType","message","decryptMessage","next","string","connect","disconnect","sendMessage","console","log","trim","encryptMessage","messageObject","text","owner","senderName","senderId","emit","None","Encrypt","cryptoMsg","Message","Decrypt","msg","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\nimport { selectEncryptionType, selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  rc4 = new RC4();\n  xtea = new XTEA();\n  userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', (crypto) => {\n      this.store.select(selectEncryptionType).subscribe((encryptionType) => {\n        \n      const message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.disconnect();\n  }\n  sendMessage(message: string, encryptionType: EncryptionType){\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType)\n    const messageObject : Message = {text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!} \n    this.messageStream.next({...messageObject});\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  encryptMessage(message: string, encryptionType: EncryptionType): string{\n    if (encryptionType === EncryptionType.None)\n      return message;\n    else if (encryptionType === EncryptionType.RC4)\n      return this.rc4.Encrypt(message);\n    else if (encryptionType === EncryptionType.XTEA)\n      return this.xtea.Encrypt(message);\n    else\n      return message;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    const text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg: Message = {text:text, crypto:cryptoMsg.crypto, owner: cryptoMsg.senderId === this.id, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId};\n    return msg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}