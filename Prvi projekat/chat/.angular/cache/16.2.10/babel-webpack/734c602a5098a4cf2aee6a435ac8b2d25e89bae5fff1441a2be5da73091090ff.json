{"ast":null,"code":"import { Subject, zip } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport { selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class ChatService {\n  constructor(store) {\n    this.store = store;\n    this.rc4 = new RC4();\n    this.xtea = new XTEA();\n    this.tigerHash = new TigerHash();\n    this.userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.username = null;\n    this.id = null;\n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', crypto => {\n      let message = null;\n      if (crypto.file) message = this.receiveFile(crypto);else message = this.decryptMessage(crypto);\n      this.messageStream.next(message);\n    });\n  }\n  connect() {\n    this.socket.connect();\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  sendMessage(message, encryptionType) {\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType);\n    const messageObject = {\n      algorithm: encryptionType,\n      text: message,\n      crypto: crypto,\n      owner: true,\n      senderName: this.username,\n      senderId: this.id,\n      file: false,\n      fileContent: null\n    };\n    this.messageStream.next({\n      ...messageObject\n    });\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file, encryptionType) {\n    const readerURL = new FileReader();\n    let dataURL = '';\n    readerURL.readAsDataURL(file);\n    readerURL.onload = () => {\n      dataURL = readerURL.result;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const typedArray = new Uint8Array(reader.result);\n        let crypto = this.encryptMessage(typedArray.reduce((acc, curr) => acc + String.fromCharCode(curr), ''));\n        encryptionType;\n        ;\n        let hash = this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0))));\n        console.log(hash);\n        crypto = crypto + hash;\n        const encryptedFile = new File([crypto], file.name, {\n          type: file.type\n        });\n        const messageObject = {\n          algorithm: encryptionType,\n          text: file.type,\n          crypto: dataURL,\n          owner: true,\n          senderName: this.username,\n          senderId: this.id,\n          file: true,\n          fileContent: encryptedFile\n        };\n        this.socket.emit('message', messageObject);\n        console.log(messageObject.fileContent);\n        this.messageStream.next({\n          ...messageObject\n        });\n      };\n    };\n  }\n  receiveFile(message) {\n    const file = this.decryptFile(message);\n    if (file === null) return null;\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n    let fileUrl = '';\n    fileReader.onload = () => {\n      fileUrl = fileReader.result;\n    };\n    const msg = {\n      algorithm: message.algorithm,\n      text: file.type,\n      crypto: fileUrl,\n      owner: message.owner,\n      senderName: message.senderName,\n      senderId: message.senderId,\n      file: true,\n      fileContent: file\n    };\n    console.log(msg);\n    return msg;\n  }\n  encryptMessage(message, encryptionType) {\n    if (encryptionType === EncryptionType.None) return message;else if (encryptionType === EncryptionType.RC4) return this.rc4.Encrypt(message);else if (encryptionType === EncryptionType.XTEA) return this.xtea.Encrypt(message);else return message;\n  }\n  decryptMessage(cryptoMsg) {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None) return cryptoMsg;else if (cryptoMsg.algorithm === EncryptionType.RC4) text = this.rc4.Decrypt(cryptoMsg.crypto);else if (cryptoMsg.algorithm === EncryptionType.XTEA) text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg = {\n      algorithm: cryptoMsg.algorithm,\n      text: text,\n      crypto: cryptoMsg.crypto,\n      owner: cryptoMsg.senderId === this.id,\n      senderName: cryptoMsg.senderName,\n      senderId: cryptoMsg.senderId,\n      file: false,\n      fileContent: null\n    };\n    return msg;\n  }\n  decryptFile(cryptoMsg) {\n    let file = null;\n    const fileReader = new FileReader();\n    console.log(cryptoMsg.fileContent);\n    const blob = new Blob([cryptoMsg.fileContent], {\n      type: cryptoMsg.text\n    });\n    console.log(blob);\n    fileReader.readAsArrayBuffer(blob);\n    fileReader.onload = () => {\n      const hash = fileReader.result?.slice(-24);\n      const crypto = fileReader.result?.slice(0, -24);\n      const hashCheck = this.tigerHash.hash(Uint8Array.from(crypto.split(``).map(char => char.charCodeAt(0))));\n      if (hashCheck !== hash) {\n        console.log(hash);\n        console.log(hashCheck);\n        console.log(`Hash se ne poklapa`);\n        return null;\n      }\n      const fullMsg = this.decryptMessage({\n        ...cryptoMsg,\n        crypto: fileReader.result\n      });\n      file = new File([fullMsg.text], `dekriptovan fajl`, {\n        type: cryptoMsg.text\n      });\n      return file;\n    };\n    return file;\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","zip","io","selectId","selectUsername","RC4","XTEA","EncryptionType","TigerHash","ChatService","constructor","store","rc4","xtea","tigerHash","userinfo$","select","socket","import","meta","env","NG_APP_API_URL","messageStream","username","id","subscribe","on","crypto","message","file","receiveFile","decryptMessage","next","connect","disconnect","sendMessage","encryptionType","console","log","trim","encryptMessage","messageObject","algorithm","text","owner","senderName","senderId","fileContent","emit","sendFile","readerURL","FileReader","dataURL","readAsDataURL","onload","result","reader","readAsArrayBuffer","typedArray","Uint8Array","reduce","acc","curr","String","fromCharCode","hash","from","split","map","char","charCodeAt","encryptedFile","File","name","type","decryptFile","fileReader","fileUrl","msg","None","Encrypt","cryptoMsg","Decrypt","blob","Blob","slice","hashCheck","fullMsg","_","i0","ɵɵinject","i1","Store","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\zastita-informacija-benc\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, zip } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\nimport { Store } from '@ngrx/store';\nimport { User } from '../models/user.model';\nimport { UserState } from '../store/user.state';\nimport { selectEncryptionType, selectId, selectUsername } from '../store/user.selector';\nimport { RC4 } from '../encryption/RC4';\nimport { XTEA } from '../encryption/XTEA';\nimport { EncryptionType } from '../models/algorithms';\nimport { TigerHash } from '../hash/TigerHash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  rc4 = new RC4();\n  xtea = new XTEA();\n  tigerHash = new TigerHash();\n  userinfo$ = zip(this.store.select(selectUsername), this.store.select(selectId));\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor(private store: Store<UserState>) { \n    this.userinfo$.subscribe(([username, id]) => {\n      this.username = username;\n      this.id = id;\n    });\n    this.socket.on('messageRec', (crypto) => {\n      let message = null;\n      if (crypto.file)\n        message = this.receiveFile(crypto);\n      else\n        message = this.decryptMessage(crypto);\n      this.messageStream.next(message!);\n    });\n  }\n  username: string | null = null;\n  id: string | null = null;\n\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.disconnect();\n  }\n  sendMessage(message: string, encryptionType: EncryptionType){\n    console.log(this.username);\n    console.log(this.id);\n    message = message.trim();\n    const crypto = this.encryptMessage(message, encryptionType)\n    const messageObject : Message = {algorithm: encryptionType, text:message, crypto:crypto, owner: true, senderName: this.username!, senderId: this.id!, file: false, fileContent: null} \n    this.messageStream.next({...messageObject});\n    messageObject.text = null;\n    this.socket.emit('message', messageObject);\n  }\n  sendFile(file: File, encryptionType: EncryptionType){\n    \n    const readerURL = new FileReader();\n    let dataURL = '';\n    readerURL.readAsDataURL(file);\n    readerURL.onload = () => {\n      dataURL = readerURL.result as string;\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const typedArray = new Uint8Array(reader.result as ArrayBuffer);\n        let crypto = this.encryptMessage(typedArray.reduce((acc, curr) => acc + String.fromCharCode(curr), '');, encryptionType);\n        let hash = this.tigerHash.hash(Uint8Array.from(crypto.split(``).map((char) => char.charCodeAt(0))));\n        console.log(hash);\n        crypto = crypto + hash;\n        const encryptedFile = new File([crypto], file.name, {type: file.type});\n        const messageObject : Message = {algorithm: encryptionType, text:file.type, crypto:dataURL, owner: true, senderName: this.username!, senderId: this.id!, file: true, fileContent: encryptedFile} \n        this.socket.emit('message', messageObject);\n        console.log(messageObject.fileContent)\n        this.messageStream.next({...messageObject});\n      }\n    }\n  }\n\n  receiveFile(message: Message){\n    const file = this.decryptFile(message);\n    if (file === null)\n      return null;\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n    let fileUrl = '';\n    fileReader.onload = () => {\n      fileUrl = fileReader.result as string;\n    }\n    const msg: Message = {\n      algorithm: message.algorithm,\n      text: file.type,\n      crypto: fileUrl,\n      owner: message.owner,\n      senderName: message.senderName,\n      senderId: message.senderId,\n      file: true,\n      fileContent: file\n    }\n    console.log(msg)\n    return msg;\n  }\n\n  encryptMessage(message: string, encryptionType: EncryptionType): string{\n    if (encryptionType === EncryptionType.None)\n      return message;\n    else if (encryptionType === EncryptionType.RC4)\n      return this.rc4.Encrypt(message);\n    else if (encryptionType === EncryptionType.XTEA)\n      return this.xtea.Encrypt(message);\n    else\n      return message;\n  }\n  decryptMessage(cryptoMsg: Message): Message {\n    let text = \"\";\n    if (cryptoMsg.algorithm === EncryptionType.None)\n      return cryptoMsg;\n    else if (cryptoMsg.algorithm === EncryptionType.RC4)\n      text = this.rc4.Decrypt(cryptoMsg.crypto);\n    else if (cryptoMsg.algorithm === EncryptionType.XTEA)\n      text = this.xtea.Decrypt(cryptoMsg.crypto);\n    const msg: Message = {algorithm: cryptoMsg.algorithm, text:text, crypto:cryptoMsg.crypto, owner: cryptoMsg.senderId === this.id, senderName: cryptoMsg.senderName, senderId: cryptoMsg.senderId, file: false, fileContent: null};\n    return msg;\n  }\n\n  decryptFile(cryptoMsg: Message): File | null {\n    let file: File | null = null;\n    const fileReader = new FileReader();\n    console.log(cryptoMsg.fileContent);\n    const blob = new Blob([cryptoMsg.fileContent!], {type: cryptoMsg.text!})\n    console.log(blob);\n    fileReader.readAsArrayBuffer(blob);\n    fileReader.onload = () => {\n      const hash = fileReader.result?.slice(-24);\n      const crypto = fileReader.result?.slice(0, -24);\n      const hashCheck = this.tigerHash.hash(Uint8Array.from((crypto as string)!.split(``).map((char) => char.charCodeAt(0))));\n      if (hashCheck !== hash) {\n        console.log(hash);\n        console.log(hashCheck);\n        console.log(`Hash se ne poklapa`);\n        return null;\n      }\n      const fullMsg = this.decryptMessage({...cryptoMsg, crypto: fileReader.result as string});\n      file = new File([fullMsg.text!], `dekriptovan fajl`, {type: cryptoMsg.text!});\n      return file;\n    }\n  return file;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}