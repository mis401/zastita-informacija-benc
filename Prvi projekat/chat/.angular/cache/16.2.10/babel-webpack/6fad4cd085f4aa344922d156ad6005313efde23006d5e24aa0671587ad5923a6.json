{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nexport class ChatService {\n  constructor() {\n    this.socket = io(import.meta.env.NG_APP_API_URL);\n    this.messageStream = new Subject();\n    this.socket.on('messageRec', crypto => {\n      const message = this.decryptMessage(crypto);\n      console.log(message);\n      this.messageStream.next(message);\n    });\n  }\n  connect() {\n    this.socket.connect();\n  }\n  disconnect() {\n    this.socket.emit('disconnect');\n  }\n  sendMessage(message) {\n    const crypto = this.encryptMessage(message);\n    this.socket.emit('message', crypto);\n    this.messageStream.next({\n      text: message,\n      crypto: crypto,\n      owner: true\n    });\n  }\n  encryptMessage(message) {\n    //todo\n    message = message.trim();\n    return `crypto ${message}`;\n  }\n  decryptMessage(crypto) {\n    //todo\n    return {\n      text: 'decrypt',\n      crypto: 'crypto',\n      owner: false\n    };\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","io","ChatService","constructor","socket","import","meta","env","NG_APP_API_URL","messageStream","on","crypto","message","decryptMessage","console","log","next","connect","disconnect","emit","sendMessage","encryptMessage","text","owner","trim","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MihajloBencun\\Desktop\\Faks\\Zastita informacija\\Prvi projekat\\chat\\src\\app\\chat\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport {io} from 'socket.io-client';\nimport { Message } from '../models/message.dto';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  socket = io(import.meta.env.NG_APP_API_URL);\n  messageStream: Subject<Message> = new Subject<Message>();\n  constructor() { \n    this.socket.on('messageRec', (crypto) => {\n      const message = this.decryptMessage(crypto);\n      console.log(message);\n      this.messageStream.next(message);\n    });\n  }\n\n  connect(){\n    this.socket.connect();\n  }\n  disconnect(){\n    this.socket.emit('disconnect');\n  }\n  sendMessage(message: string){\n    const crypto = this.encryptMessage(message)\n    this.socket.emit('message', crypto);\n    this.messageStream.next({text:message, crypto:crypto, owner: true});\n  }\n  encryptMessage(message: string): string{\n    //todo\n    message = message.trim();\n    return `crypto ${message}`;\n  }\n  decryptMessage(crypto: string): Message {\n    //todo\n    return {text:'decrypt', crypto:'crypto', owner: false};\n  }\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAAQC,EAAE,QAAO,kBAAkB;;AAKnC,OAAM,MAAOC,WAAW;EAItBC,YAAA;IAFA,KAAAC,MAAM,GAAGH,EAAE,CAACI,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,cAAc,CAAC;IAC3C,KAAAC,aAAa,GAAqB,IAAIT,OAAO,EAAW;IAEtD,IAAI,CAACI,MAAM,CAACM,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAI;MACtC,MAAMC,OAAO,GAAG,IAAI,CAACC,cAAc,CAACF,MAAM,CAAC;MAC3CG,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MACpB,IAAI,CAACH,aAAa,CAACO,IAAI,CAACJ,OAAO,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAK,OAAOA,CAAA;IACL,IAAI,CAACb,MAAM,CAACa,OAAO,EAAE;EACvB;EACAC,UAAUA,CAAA;IACR,IAAI,CAACd,MAAM,CAACe,IAAI,CAAC,YAAY,CAAC;EAChC;EACAC,WAAWA,CAACR,OAAe;IACzB,MAAMD,MAAM,GAAG,IAAI,CAACU,cAAc,CAACT,OAAO,CAAC;IAC3C,IAAI,CAACR,MAAM,CAACe,IAAI,CAAC,SAAS,EAAER,MAAM,CAAC;IACnC,IAAI,CAACF,aAAa,CAACO,IAAI,CAAC;MAACM,IAAI,EAACV,OAAO;MAAED,MAAM,EAACA,MAAM;MAAEY,KAAK,EAAE;IAAI,CAAC,CAAC;EACrE;EACAF,cAAcA,CAACT,OAAe;IAC5B;IACAA,OAAO,GAAGA,OAAO,CAACY,IAAI,EAAE;IACxB,OAAO,UAAUZ,OAAO,EAAE;EAC5B;EACAC,cAAcA,CAACF,MAAc;IAC3B;IACA,OAAO;MAACW,IAAI,EAAC,SAAS;MAAEX,MAAM,EAAC,QAAQ;MAAEY,KAAK,EAAE;IAAK,CAAC;EACxD;EAAC,QAAAE,CAAA,G;qBA/BUvB,WAAW;EAAA;EAAA,QAAAwB,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}